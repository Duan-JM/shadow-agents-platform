version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: pgvector/pgvector:pg15
    container_name: shadow-agents-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_DATABASE:-shadow_agents}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shadow-agents-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: shadow-agents-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shadow-agents-network

  # Milvus 向量数据库 - Standalone
  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: shadow-agents-milvus-etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - shadow-agents-network

  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: shadow-agents-milvus-minio
    restart: unless-stopped
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus_minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - shadow-agents-network

  milvus:
    image: milvusdb/milvus:v2.4.15
    container_name: shadow-agents-milvus
    restart: unless-stopped
    depends_on:
      - milvus-etcd
      - milvus-minio
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    command: ["milvus", "run", "standalone"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - shadow-agents-network

  # API 服务
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: shadow-agents-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
    environment:
      ENV: ${ENV:-production}
      DEBUG: ${DEBUG:-false}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE:-shadow_agents}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      MILVUS_URI: http://milvus:19530
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
    volumes:
      - api_storage:/app/storage
      - api_logs:/app/logs
    ports:
      - "${API_PORT:-5000}:5000"
    networks:
      - shadow-agents-network

  # Celery Worker
  worker:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: shadow-agents-worker
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - api
    environment:
      ENV: ${ENV:-production}
      DEBUG: ${DEBUG:-false}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE:-shadow_agents}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      MILVUS_URI: http://milvus:19530
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
    volumes:
      - api_storage:/app/storage
      - api_logs:/app/logs
    command: celery -A celery_app worker --loglevel=info -c 4
    networks:
      - shadow-agents-network

  # Celery Beat (定时任务)
  beat:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: shadow-agents-beat
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - api
    environment:
      ENV: ${ENV:-production}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE:-shadow_agents}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: celery -A celery_app beat --loglevel=info
    networks:
      - shadow-agents-network

  # Web 前端
  web:
    build:
      context: ../web
      dockerfile: Dockerfile
    container_name: shadow-agents-web
    restart: unless-stopped
    depends_on:
      - api
    environment:
      NEXT_PUBLIC_API_URL: http://api:5000
      NODE_ENV: production
    ports:
      - "${WEB_PORT:-3000}:3000"
    networks:
      - shadow-agents-network

  # Nginx 反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: shadow-agents-nginx
    restart: unless-stopped
    depends_on:
      - api
      - web
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - shadow-agents-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  milvus_etcd_data:
    driver: local
  milvus_minio_data:
    driver: local
  milvus_data:
    driver: local
  api_storage:
    driver: local
  api_logs:
    driver: local

networks:
  shadow-agents-network:
    driver: bridge
